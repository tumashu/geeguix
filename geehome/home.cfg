;;; -*- mode: scheme; -*-

;; This "home-environment" file can be passed to 'guix home reconfigure'
;; to reproduce the content of your profile.  This is "symbolic": it only
;; specifies package names.  To reproduce the exact same profile, you also
;; need to capture the channels being used, as returned by "guix describe".
;; See the "Replicating Guix" section in the manual.

(use-modules (gnu home)
             (gnu home services)
             (gnu home services desktop)
             (gnu home services fontutils)
             (gnu home services guix)
             (gnu home services shells)
             (gnu home services shepherd)
             (gnu home services xdg)
             (gnu packages)
             (gnu packages admin)
             (gnu packages linux)
             (gnu packages syncthing)
             (gnu packages xdisorg)
             (gnu packages xfce)
             (gnu services)
             (gnu services shepherd)
             (guix channels)
             (guix gexp)
             (srfi srfi-1)
             (srfi srfi-13))

(define %geeguix-directory "${HOME}/geeguix")
(define %geesystem-config  "${HOME}/geeguix/geesystem/thinkpad-t14-amd.cfg")

(define %geehome-profile   "${HOME}/.guix-home/profile")
(define %geehome-config    "${HOME}/geeguix/geehome/home.cfg")
(define %guix-checkout     "${HOME}/guix/guix")

(define %geehome-packages
  (map (compose list specification->package+output)
       (list
        ;; 基本工具
        "bash-completion"
        "curl"
        "p7zip"
        "recutils"  ; 提供 recsel 命令: 'guix search emacs | recsel -p name'
        "unrar"
        "unzip"
        "watchexec"
        "zile"

        ;; 开发工具
        "make"

        ;; Emacs
        "emacs-gee"
        "universal-ctags"

        ;; 邮件工具
        "notmuch"

        ;; 安全
        "gnome-keyring"
        "gnupg"
        "pinentry"
        "seahorse"

        ;; 版本管理
        "git"
        "git:credential-libsecret"
        "git:credential-netrc"
        "git:send-email"
        "mercurial"

        ;; 网页浏览器
        "icecat"
        "ungoogled-chromium"

        ;; 中文输入法
        "fcitx5"
        "fcitx5-chinese-addons"
        "fcitx5-configtool"

        ;; 办公软件
        "libreoffice"

        ;; 硬件管理
        "brightnessctl"
        "gparted"

        ;; 主题字体
        "adwaita-icon-theme"
        "elementary-xfce-icon-theme"
        "font-wqy-microhei"
        "gnome-themes-extra"   ; gtk2 theme
        "gtk-engines"          ; gtk2 theme

        ;; 桌面工具
        "atril"
        "engrampa"
        "mousepad"
        "ristretto"
        "xdg-utils"
        "xfce4-screenshooter"
        "xhost"
        "xkill"

        ;; 同步和备份工具
        "grsync"
        "syncthing"
        "syncthing-gtk"  ; syncthing-gtk 不太好用，但可以提供一个漂亮图标。
        "rsync"

        ;; 声音图像多媒体
        "cheese"
        "gimp"
        "gst-plugins-base"
        "gst-plugins-good"
        "gst-plugins-bad"
        "gst-plugins-ugly"
        "imagemagick"
        "mcomix"
        "mpv"
        "python-mutagen" ; 修复 mp3 乱码
        "rhythmbox"
        "vlc"

        ;; Wine
        "wine"
        "winetricks"

        ;; 虚拟机
        "virt-manager"
        "virt-viewer"

        ;; 游戏
        "neverball"
        "supertuxkart"
        "xonotic")))

(define brightnessctl-service
  (shepherd-service
   (provision '(brightnessctl))
   (documentation "Run 'brightnessctl'")
   (one-shot? #t)
   (respawn? #f)
   (start #~(make-forkexec-constructor
             (list #$(file-append brightnessctl "/bin/brightnessctl")
                   "set" "70")))
   (stop #~(make-kill-destructor))))

(define syncthing-service
  (shepherd-service
   (provision '(syncthing))
   (documentation "Run 'syncthing' without calling the browser")
   (respawn? #t)
   (start #~(make-forkexec-constructor
             (list #$(file-append syncthing "/bin/syncthing")
                   "-no-browser"
                   "-logflags=3" ; prefix with date & time
                   "-logfile=/home/feng/.local/var/log/syncthing.log")))
   (stop #~(make-kill-destructor))))

(define xautolock-service
  (shepherd-service
   (provision '(xautolock))
   (documentation "Run 'xautolock'")
   (start #~(make-forkexec-constructor
             (list #$(file-append xautolock "/bin/xautolock")
                   "-detectsleep")))
   (stop #~(make-kill-destructor))))

(define (get-search-paths str)
  (string-append
   %geehome-profile str ":"
   "${HOME}/.guix-profile" str ":"
   "/run/current-system/profile" str))

(define (get-profile-file str)
  (string-append %geehome-profile str))

(home-environment
 (packages %geehome-packages)
 (services
  (list
   (simple-service
    'fonts
    home-files-service-type
    `((".fonts/simhei.ttf"        ,(local-file "files/fonts/simhei.ttf"))
      (".fonts/wqy-microhei.ttc"  ,(local-file "files/fonts/wqy-microhei.ttc"))))

   (simple-service
    'guile-config
    home-files-service-type
    `((".guile"        ,(local-file "files/guile"))
      (".guile-geiser" ,(local-file "files/guile-geiser"))))

   (simple-service
    'gtk2-config
    home-files-service-type
    `((".gtkrc-2.0"    ,(local-file "files/gtkrc-2.0"))))

   (simple-service
    'authinfo-config-example
    home-files-service-type
    `((".authinfo-example"  ,(local-file "files/authinfo-example"))))

   (simple-service
    'notmuch-config
    home-files-service-type
    `((".notmuch-config"    ,(local-file "files/notmuch-config"))))

   (service
    home-channels-service-type
    (list (channel
           (name 'nonguix)
           (url "https://gitlab.com/nonguix/nonguix")
           ;; Enable signature verification:
           (introduction
            (make-channel-introduction
             "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
             (openpgp-fingerprint
              "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
          (channel
           (inherit (find guix-channel? %default-channels))
           (url "https://git.sjtu.edu.cn/sjtug/guix.git"))))

   (service
    home-xdg-user-directories-service-type
    (home-xdg-user-directories-configuration
     (desktop     "$HOME/desktop")
     (documents   "$HOME/documents")
     (download    "$HOME/downloads")
     (music       "$HOME/music")
     (pictures    "$HOME/pictures")
     (publicshare "$HOME/public")
     (templates   "$HOME/templates")
     (videos      "$HOME/videos")))

   (service
    home-shepherd-service-type
    (home-shepherd-configuration
     (shepherd shepherd)
     (services
      (list syncthing-service
            xautolock-service
            brightnessctl-service))))

   (service
    home-bash-service-type
    (home-bash-configuration
     (guix-defaults? #t)
     (aliases
      `(("la" . "ls -A")
        ("l"  . "ls -CF")
        ("iguix"            .
         ,(string-append %guix-checkout "/pre-inst-env guix"))
        ("iguix-dev"        .
         ,(string-append
           "cd " %guix-checkout "; guix shell -D guix"))
        ("isystem-reconfig" .
         ,(string-append
           "sudo -E guix system reconfigure " %geesystem-config))
        ("ihome-test"       .
         ,(string-append
           "guix home container " %geehome-config))
        ("ihome-reconfig"   .
         ,(string-append
           "guix home reconfigure " %geehome-config))))
     (environment-variables
      `(;; Guix 使用环境变量
        ("GUIX_PACKAGE_PATH" . ,%geeguix-directory)

        ;; Fcitx5 输入法
        ("GTK_IM_MODULE" . "fcitx")
        ("QT_IM_MODULE"  . "fcitx")
        ("XMODIFIERS"    . "@im=fcitx")

        ;; GTK 输入法模块
        ("GUIX_GTK2_IM_MODULE_FILE" .
         ,(get-profile-file "/lib/gtk-2.0/2.10.0/immodules-gtk2.cache"))
        ("GUIX_GTK3_IM_MODULE_FILE" .
         ,(get-profile-file "/lib/gtk-3.0/3.0.0/immodules-gtk3.cache"))

        ;; GTK2 模块搜索目录
        ("GUIX_GTK2_PATH"    .  ,(get-search-paths "/lib/gtk-2.0"))

        ;; Notmuch 搜索中文邮件设置： Notmuch 使用 Xapian 创建邮
        ;; 件索引，Xapian (version < 1.5) 支持 CJK 需要设置下面的
        ;; 环境变量，Xapian (version >= 1.5) 如果启用了 LIBICU,
        ;; 会自动识别 CJK, 不需要额外设置。
        ("XAPIAN_CJK_NGRAM"  .  "1")

        ;; Xfce 相关搜索目录
        ("X_XFCE4_LIB_DIRS"  .  ,(get-search-paths "/lib/xfce4"))
        ("THUNARX_DIRS"      .  ,(get-search-paths "/lib/thunarx-3")))))))))
